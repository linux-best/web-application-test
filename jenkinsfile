pipeline {
    agent any

    environment {
        REPO_PROJECT_1 = 'https://github.com/linux-best/scripts/'
        REPO_PROJECT = 'https://github.com/linux-best/web-application-test/'
        SONAR_HOME = "/opt/sonar-scanner/bin/sonar-scanner"
    }

    stages {
        stage("Checkout SCM => (web-application-test)") {
            steps {
                echo "Checking out the ${env.REPO_PROJECT} from SCM"
                git branch: 'main', url: "${env.REPO_PROJECT}"
            }
        }
        stage("Checkout SCM => (scripts)") {
            steps {
                dir("scripts") {
                    echo "Checking out the ${env.REPO_PROJECT_1} from SCM"
                    git branch: 'main', url: "${env.REPO_PROJECT_1}"
                }
            }
        }
        stage("Build") {
            steps {
                sh "pwd"
                sh "sudo pip3 install -r requirments.txt"
            }
        }
        stage("Test") {
            stages {
                stage("sonarqube => code analyze") {
                    steps {
                        dir("scripts") {
                            withSonarQubeEnv('localSonarqube') {
                            sh "${env.SONAR_HOME}"

                            }
                        }   
                    }
                }
                stage("sonarqube => Quality_Gate") {
                    steps {
                        dir("scripts") {
                            echo "stage ==> [Analysing the Code ......]"
                            timeout(time: 15,unit: java.util.concurrent.TimeUnit.MINUTES) {
                                script{
                                    def qg = waitForQualityGate()
                                    if (qg.status == 'OK') {
                                        echo "Pipeline CodeAnalysis have been successfully Done: ${qg.status}"
                                    } else {
                                        error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                    }
                                }
                            } 
                        }
                    }
                }
                stage("Web-scraping => web-application test") {
                    steps {
                        sh "pwd"
                        sh "pytest -v -s app_tests/unit_test.py"
                        echo "Application Ready to Deploy the (Peneration Build)"
                    }
                }
            }
        }
        stage("Staging") {
            steps {
                echo "Executing the Penetration Build ........."
                build job: 'Security_Build', wait: true , propagate: false
            }
        }
    }
    post {
        success {
            echo "Done !"
            script {
                emailext(
                    subject: "Build ${env.BUILD_NUMBER} of ${env.JOB_NAME} was successful",
                    body: """
                    Check the details at ${env.BUILD_URL}""",
                    to: "amirmahdifhp@gmail.com"
                )
            }
        } // email
        failure {
            echo "Failed !!"
            script {
                emailext(
                    subject: "Build ${env.BUILD_NUMBER} of ${env.JOB_NAME} was failed",
                    body: """
                    Check the details at ${env.BUILD_URL}""",
                    to: "amirmahdifhp@gmail.com"
                )
            }
        } // email
    }
}
